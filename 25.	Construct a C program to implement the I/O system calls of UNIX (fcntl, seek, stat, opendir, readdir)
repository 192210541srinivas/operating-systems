#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <dirent.h>

void demonstrateFcntl(const char *filename);
void demonstrateSeek(const char *filename);
void demonstrateStat(const char *filename);
void demonstrateDir(const char *dirname);

int main() {
    const char *filename = "sample.txt";
    const char *dirname = "."; 

    printf("Demonstrating fcntl for file '%s'\n", filename);
    demonstrateFcntl(filename);

    printf("\nDemonstrating lseek for file '%s'\n", filename);
    demonstrateSeek(filename);

    printf("\nDemonstrating stat for file '%s'\n", filename);
    demonstrateStat(filename);

    printf("\nDemonstrating opendir and readdir for directory '%s'\n", dirname);
    demonstrateDir(dirname);

    return 0;
}

void demonstrateFcntl(const char *filename) {
    int fd = open(filename, O_RDONLY);
    if (fd == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    int flags = fcntl(fd, F_GETFL);
    if (flags == -1) {
        perror("Error getting file flags");
        close(fd);
        exit(EXIT_FAILURE);
    }

    printf("File flags for '%s': %d\n", filename, flags);

    close(fd);
}

void demonstrateSeek(const char *filename) {
    int fd = open(filename, O_RDONLY);
    if (fd == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    off_t current_pos = lseek(fd, 0, SEEK_CUR);
    if (current_pos == -1) {
        perror("Error getting current file offset");
        close(fd);
        exit(EXIT_FAILURE);
    }

    printf("Current position in '%s': %ld\n", filename, current_pos);

    close(fd);
}

void demonstrateStat(const char *filename) {
    struct stat file_stat;
    if (stat(filename, &file_stat) == -1) {
        perror("Error getting file status");
        exit(EXIT_FAILURE);
    }

    printf("File size of '%s': %ld bytes\n", filename, file_stat.st_size);
    printf("File permissions of '%s': %o\n", filename, file_stat.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO));
}

void demonstrateDir(const char *dirname) {
    DIR *dir = opendir(dirname);
    if (!dir) {
        perror("Error opening directory");
        exit(EXIT_FAILURE);
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    closedir(dir);
}
