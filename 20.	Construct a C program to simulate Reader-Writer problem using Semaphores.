#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

int shared_resource = 0;
int readers_count = 0;

sem_t mutex;         // Controls access to readers_count
sem_t rw_mutex;      // Controls access to shared_resource
sem_t resource_sem;  // Ensures mutual exclusion between readers

void *reader(void *arg);
void *writer(void *arg);

int main() {
    pthread_t reader_threads[NUM_READERS], writer_threads[NUM_WRITERS];
    int i, reader_ids[NUM_READERS], writer_ids[NUM_WRITERS];

    sem_init(&mutex, 0, 1);
    sem_init(&rw_mutex, 0, 1);
    sem_init(&resource_sem, 0, 1);

    for (i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&reader_threads[i], NULL, reader, &reader_ids[i]);
    }

    for (i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&writer_threads[i], NULL, writer, &writer_ids[i]);
    }

    for (i = 0; i < NUM_READERS; i++) {
        pthread_join(reader_threads[i], NULL);
    }

    for (i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writer_threads[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&rw_mutex);
    sem_destroy(&resource_sem);

    return 0;
}

void *reader(void *arg) {
    int reader_id = *((int *)arg);

    while (1) {
        sem_wait(&mutex);
        readers_count++;
        if (readers_count == 1) {
            sem_wait(&rw_mutex);
        }
        sem_post(&mutex);

        printf("Reader %d is reading: %d\n", reader_id, shared_resource);

        sem_wait(&mutex);
        readers_count--;
        if (readers_count == 0) {
            sem_post(&rw_mutex);
        }
        sem_post(&mutex);

        sleep(rand() % 3);
    }

    pthread_exit(NULL);
}

void *writer(void *arg) {
    int writer_id = *((int *)arg);

    while (1) {
        sem_wait(&resource_sem);
        sem_wait(&rw_mutex);

        shared_resource++;
        printf("Writer %d is writing: %d\n", writer_id, shared_resource);

        sem_post(&rw_mutex);
        sem_post(&resource_sem);

        sleep(rand() % 3);
    }

    pthread_exit(NULL);
}
