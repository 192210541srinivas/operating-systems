#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5  
int buffer[BUFFER_SIZE];
int count = 0;
int in = 0;    
int out = 0; 
sem_t empty;    
sem_t full;   
pthread_mutex_t mutex;
void *producer(void *arg);
void *consumer(void *arg);
void insert_item(int item);
int remove_item();

int main() {
    pthread_t producer_thread, consumer_thread;
    int i;

    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}

void *producer(void *arg) {
    int item;

    while (1) {
        item = rand() % 100 + 1;  // Generate a random number as item

        sem_wait(&empty);
        pthread_mutex_lock(&mutex);

        insert_item(item);
        printf("Produced item: %d\n", item);

        pthread_mutex_unlock(&mutex);
        sem_post(&full);

        sleep(rand() % 3);
    }

    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int item;

    while (1) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);

        item = remove_item();
        printf("Consumed item: %d\n", item);

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);

        sleep(rand() % 3);
    }

    pthread_exit(NULL);
}

void insert_item(int item) {
    buffer[in] = item;
    in = (in + 1) % BUFFER_SIZE;
    count++;
}

int remove_item() {
    int item = buffer[out];
    out = (out + 1) % BUFFER_SIZE;
    count--;
    return item;
}
