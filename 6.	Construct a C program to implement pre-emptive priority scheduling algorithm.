#include <stdio.h>
#include <limits.h>

typedef struct {
    int process_id;
    int burst_time;
    int remaining_time;
    int priority;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
    int completed;
} Process;

void calculateWaitingTime(Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
    }
}

void calculateTurnaroundTime(Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }
}

void printProcessDetails(Process processes[], int n) {
    printf("Process ID\tBurst Time\tPriority\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].burst_time,
               processes[i].priority, processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
}

void calculateAverageTimes(Process processes[], int n) {
    float total_waiting_time = 0;
    float total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
}

int main() {
    int n, time = 0, completed = 0;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter priority for process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].completed = 0;
    }

    while (completed != n) {
        int idx = -1;
        int highest_priority = INT_MIN;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && !processes[i].completed && processes[i].priority > highest_priority) {
                highest_priority = processes[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            processes[idx].remaining_time--;
            if (processes[idx].remaining_time == 0) {
                processes[idx].completed = 1;
                completed++;
                processes[idx].turnaround_time = time + 1 - processes[idx].arrival_time;
            }
        }
        time++;
    }

    calculateWaitingTime(processes, n);
    calculateTurnaroundTime(processes, n);
    printProcessDetails(processes, n);
    calculateAverageTimes(processes, n);

    return 0;
}
